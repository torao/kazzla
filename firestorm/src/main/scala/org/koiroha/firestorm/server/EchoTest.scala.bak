/*
 * Copyright (c) 2013 koiroha.org.
 * All sources and related resources are available under Apache License 2.0.
 * http://www.apache.org/licenses/LICENSE-2.0.html
 */

package org.koiroha.firestorm.server

import java.nio.ByteBuffer
import java.net.{ServerSocket, InetSocketAddress}
import com.twitter.finagle.{Codec, CodecFactory, Service}
import com.twitter.util.{ Future}
import org.jboss.netty.channel.{Channels, ChannelPipelineFactory}
import org.jboss.netty.handler.codec.string.{StringEncoder, StringDecoder}
import org.jboss.netty.handler.codec.frame.{DelimiterBasedFrameDecoder, Delimiters}
import java.lang.String
import org.koiroha.firestorm.core.{Server, Endpoint, Context}

/**
 * Created with IntelliJ IDEA.
 * User: torao
 * Date: 2013/01/03
 * Time: 11:13
 * To change this template use File | Settings | File Templates.
 */
object EchoTest {
	val port = 5007

	def main(args:Array[String]):Unit = {
//		streamEchoServer()
//		finagleEchoServer()
		firestormEchoSever()
		firestormEchoClient()
	}

	def encode(i:Int):ByteBuffer = {
		ByteBuffer.wrap("%d\n".format(i).getBytes())
	}
	def decode(b:ByteBuffer):Int = {
		val b1 = new Array[Byte](b.remaining())
		b.get(b1)
		new String(b1, 0, b1.length - 1).toInt
	}
	def detect(b:ByteBuffer):Int = {
		for (i <- b.position() until b.limit()){
			if (b.get(i) == '\n'){
				return i - b.position() + 1
			}
		}
		0
	}

	def firestormEchoClient(){
		val dispatcher = new Context("echo-client")
		val endpoints = for (i <- 1 to 100) yield {
			Endpoint[Int](dispatcher).onConnect { ep =>
			}.onArrivalBufferedIn { ep =>
				ep.in.slice { (buffer) => detect(buffer) } match {
					case Some(buffer) =>
						val value = decode(buffer)
					case None => None
				}
			}.onDepartureBufferedOut { ep =>
				ep.out.write(encode(ep.state.getOrElse(0)))
				ep.state = Some(ep.state.getOrElse(0) + 1)
			}.connect("localhost", port)
		}
	}

	def firestormEchoSever(){
		val dispatcher1 = new Context("echo-server")
		val server = Server[Int](dispatcher1).onAccept { (_, ep) =>
			printf("S: onAccept()%n")
			ep.onArrivalBufferedIn { e =>
				ep.in.slice { (buffer) => detect(buffer) } match {
					case Some(buffer) =>
						val value = decode(buffer)
						if (value != e.state.getOrElse(0)){
							throw new Exception("値が違います: %d != %d".format(value, e.state.getOrElse(0)))
						}
						e.state = Some(value + 1)
						e.out.write(encode(value))
					case None => None
				}
			}
		}.listen(port)
	}

	def streamEchoServer(){
		new Thread(){
			override def run(){
				val s = new ServerSocket(port)
				while(true){
					val c = s.accept()
					new Thread(){
						override def run(){
							val b = new Array[Byte](1024)
							val in = c.getInputStream
							val out = c.getOutputStream
							while(true){
								val len = in.read(b)
								out.write(b, 0, len)
							}
						}
					}.start()
				}
			}
		}.start()
	}

	def finagleEchoServer(){
		/**
		 * A very simple service that simply echos its request back
		 * as a response. Note that it returns a Future, since everything
		 * in Finagle is asynchronous.
		 */
		val service = new Service[String, String] {
			def apply(request: String) = Future.value(request)
		}

		// Bind the service to port 8080
		ServerBuilder()
			.codec(StringCodec)
			.bindTo(new InetSocketAddress(port))
			.name("echoserver")
			.build(service)
	}

	object StringCodec extends StringCodec

	class StringCodec extends CodecFactory[String, String] {
		def server = Function.const {
			new Codec[String, String] {
				def pipelineFactory = new ChannelPipelineFactory {
					def getPipeline = {
						val pipeline = Channels.pipeline()
						pipeline.addLast("line",
							new DelimiterBasedFrameDecoder(100, Delimiters.lineDelimiter: _*))
						pipeline.addLast("stringDecoder", new StringDecoder(CharsetUtil.UTF_8))
						pipeline.addLast("stringEncoder", new StringEncoder(CharsetUtil.UTF_8))
						pipeline
					}
				}
			}
		}

		def client = Function.const {
			new Codec[String, String] {
				def pipelineFactory = new ChannelPipelineFactory {
					def getPipeline = {
						val pipeline = Channels.pipeline()
						pipeline.addLast("stringEncode", new StringEncoder(CharsetUtil.UTF_8))
						pipeline.addLast("stringDecode", new StringDecoder(CharsetUtil.UTF_8))
						pipeline
					}
				}
			}
		}
	}
}
