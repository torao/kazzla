/*
 * Copyright (c) 2014 koiroha.org.
 * All sources and related resources are available under Apache License 2.0.
 * http://www.apache.org/licenses/LICENSE-2.0.html
*/
package com.kazzla.storage

import scala.concurrent.Future

// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// FileStore
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
/**
 * Kazzla ドメインのファイル保存領域サービスを表すトレイトです。
 * @author Takami Torao
 */
trait FileStore {

	// ==============================================================================================
	// ファイルステータスの参照
	// ==============================================================================================
	/**
	 * 指定されたファイルまたはディレクトリのステータスを参照します。
	 * @param path ステータスを参照するファイルのパス
	 * @return ファイルまたはディレクトリのステータス, 存在しない場合は FileNotFoundException
	 */
	def status(path:String):Future[FileStatus]

	// ==============================================================================================
	// ファイルステータスの設定
	// ==============================================================================================
	/**
	 * 指定されたファイルまたはディレクトリのステータスを設定します。
	 * @param path ステータスを設定するファイルのパス
	 * @param status 設定するステータス
	 * @return 新しいファイルステータス, 存在しない場合は FileNotFoundException
	 */
	def status(path:String, status:FileStatus):Future[FileStatus]

	// ==============================================================================================
	// ディレクトリの作成
	// ==============================================================================================
	/**
	 * ディレクトリを作成します。
	 */
	def mkdir(path:String, force:Boolean):Future[Boolean]

	// ==============================================================================================
	// ファイル一覧の参照
	// ==============================================================================================
	/**
	 * 指定されたディレクトリ直下に存在するファイルの一覧を非同期で参照します。ラムダ `listener` に対してファイル名
	 * の文字列をコールバックします。`listener` の第一パラメータは `path` の値、第二パラメータは取得したファイル名
	 * です。
	 * @param path ディレクトリのパス
	 * @param listener ファイルパスのリスナ
	 * @return ディレクトリのステータス
	 */
	def list(path:String)(listener:(String,String)=>Unit):Future[FileStatus]

	// ==============================================================================================
	// ファイルフラグメントの参照
	// ==============================================================================================
	/**
	 * 指定されたファイルのフラグメントを取得します。
	 */
	def location(path:String, offset:Long):Future[Fragment]

	// ==============================================================================================
	// ファイル領域の割り当て
	// ==============================================================================================
	/**
	 * 指定されたファイルに対する領域割り当てを行います。非同期パイプに対して残りのデータサイズ (不明な場合は負の値)
	 * を送信することでリージョンサービスはファイルの新しい領域を割り当てて [[Fragment]] で応答します。クライアント
	 * は割り当てられた領域すべてにデータを書き終えたら残りのデータサイズを送信して次の領域を割り当てます。
	 * @see [[com.kazzla.storage.StorageNode.write()]]
	 */
	def allocate(path:String, option:AllocateOption*):Future[FileStatus]

	// ==============================================================================================
	// ファイルの削除
	// ==============================================================================================
	/**
	 * 指定されたファイルを削除します。
	 * @return ファイルを削除した場合 true、ファイルが存在しなかったなど削除に失敗した場合は false
	 */
	def delete(path:String):Future[Boolean]

	// ==============================================================================================
	// ファイルの移動
	// ==============================================================================================
	/**
	 * 指定されたファイルを移動 (リネーム) します。
	 * @param src 移動元のファイルパス
	 * @param dst 移動先のファイルパス
	 * @param options 移動時のオプション
	 * @return 移動先のファイルステータス
	 */
	def move(src:String, dst:String, options:MoveOption*):Future[FileStatus]

	// ==============================================================================================
	// ファイルのコピー
	// ==============================================================================================
	/**
	 * 指定されたファイルをコピーします。コピー対象がディレクトリの場合はディレクトリ内のすべてのファイルおよびサブ
	 * ディレクトリがコピーされます。
	 * @param src コピー元のファイルパス
	 * @param dst コピー先のファイルパス
	 * @param options コピー時のオプション
	 * @return コピー先のファイルステータス
	 */
	def copy(src:String, dst:String, options:CopyOption*):Future[FileStatus]

}
