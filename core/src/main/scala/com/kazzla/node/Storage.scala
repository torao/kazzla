/*
 * Copyright (c) 2013 koiroha.org.
 * All sources and related resources are available under Apache License 2.0.
 * http://www.apache.org/licenses/LICENSE-2.0.html
*/
package com.kazzla.node

import com.kazzla.asterisk.Export
import java.util.UUID

// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Volume
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
/**
 * @author Takami Torao
 */
trait Storage {

	// ==============================================================================================
	// 実体ファイルの参照
	// ==============================================================================================
	/**
	 * 指定された UUID のブロックに対するローカルファイルを参照します。
	 * @return ブロックファイル
	 */
	@Export(100)
	def lookup():Unit

	// ==============================================================================================
	// チェックサムの参照
	// ==============================================================================================
	/**
	 * 指定されたブロックのチェックサムを算出します。
	 * @param blockId ブロック ID
	 */
	@Export(110)
	def checksum(blockId:UUID, challenge:Array[Byte]):Array[Byte]

	// ==============================================================================================
	// ブロックの作成
	// ==============================================================================================
	/**
	 * 指定されたブロックを作成します。
	 * @param blockId ブロック ID
	 * @param size ブロックサイズ
	 */
	@Export(200)
	def create(blockId:UUID, size:Long):Unit

	// ==============================================================================================
	// ブロックの読み込み
	// ==============================================================================================
	/**
	 * 指定されたブロックの領域を読み込みます。
	 * @param blockId ブロック ID
	 */
	@Export(210)
	def read(blockId:UUID, offset:Long, length:Int):Unit

	// ==============================================================================================
	// ブロックの書き込み
	// ==============================================================================================
	/**
	 * 指定されたブロックの領域を書き込みます。
	 * @param blockId ブロック ID
	 */
	@Export(220)
	def update(blockId:UUID, offset:Long, length:Int):Unit

	// ==============================================================================================
	// ブロックの削除
	// ==============================================================================================
	/**
	 * 指定されたブロックを削除します。
	 * @param blockId ブロック ID
	 */
	@Export(230)
	def delete(blockId:UUID):Unit

}

object Storage {

	// ==============================================================================================
	// メッセージダイジェストアルゴリズム
	// ==============================================================================================
	/**
	 * ブロックのメッセージダイジェストを算出するアルゴリズムです。
	 */
	val ChecksumAlgorithm = "SHA1"

}