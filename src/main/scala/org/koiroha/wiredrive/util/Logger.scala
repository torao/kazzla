/* Copyright (C) 2012 BJöRFUAN
 * This source and related resources are distributed under Apache License, Version 2.0.
 */
package org.koiroha.wiredrive.util

import java.util.logging.Level

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Logger
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
/**
 * @author Takami Torao
 */
class Logger(name:String) {

	// ========================================================================
	// ログ出力先
	// ========================================================================
	/**
	 * このインスタンスのログ出力先です。
	 */
	private val logger = java.util.logging.Logger.getLogger(name)

	// ========================================================================
	// 致命的なエラー出力
	// ========================================================================
	/**
	 * 致命的エラーを出力します。
	 * @param format メッセージフォーマット
	 * @param args メッセージフォーマット様引数
	 */
	def fatal(format:String, args:Any*){
		logger.severe(format.format(args:_*))
	}

	// ========================================================================
	// 致命的なエラー出力
	// ========================================================================
	/**
	 * 致命的エラーを出力します。
	 * @param format メッセージフォーマット
	 * @param args メッセージフォーマット様引数
	 */
	def fatal(ex:Throwable, format:String, args:Any*){
		logger.log(Level.SEVERE, format.format(args:_*), ex)
	}

	// ========================================================================
	// エラー出力
	// ========================================================================
	/**
	 * エラーを出力します。
	 * @param format メッセージフォーマット
	 * @param args メッセージフォーマット様引数
	 */
	def error(format:String, args:Any*){
		logger.severe(format.format(args:_*))
	}

	// ========================================================================
	// エラー出力
	// ========================================================================
	/**
	 * エラーを出力します。
	 * @param format メッセージフォーマット
	 * @param args メッセージフォーマット様引数
	 */
	def error(ex:Throwable, format:String, args:Any*){
		logger.log(Level.SEVERE, format.format(args:_*), ex)
	}

	// ========================================================================
	// 警告出力
	// ========================================================================
	/**
	 * 警告を出力します。
	 * @param format メッセージフォーマット
	 * @param args メッセージフォーマット様引数
	 */
	def warn(format:String, args:Any*){
		logger.warning(format.format(args:_*))
	}

	// ========================================================================
	// 警告出力
	// ========================================================================
	/**
	 * 警告を出力します。
	 * @param format メッセージフォーマット
	 * @param args メッセージフォーマット様引数
	 */
	def warn(ex:Throwable, format:String, args:Any*){
		logger.log(Level.WARNING, format.format(args:_*), ex)
	}

	// ========================================================================
	// 情報出力
	// ========================================================================
	/**
	 * 情報を出力します。
	 * @param format メッセージフォーマット
	 * @param args メッセージフォーマット様引数
	 */
	def info(format:String, args:Any*){
		logger.info(format.format(args:_*))
	}

	// ========================================================================
	// 情報出力
	// ========================================================================
	/**
	 * 情報を出力します。
	 * @param format メッセージフォーマット
	 * @param args メッセージフォーマット様引数
	 */
	def info(ex:Throwable, format:String, args:Any*){
		logger.log(Level.INFO, format.format(args:_*), ex)
	}

	// ========================================================================
	// デバッグ出力の判定
	// ========================================================================
	/**
	 * この出力先に対してデバッグ出力が行われるかを判定します。
	 * @return デバッグレベルのログが出力される場合 true
	 */
	def isDebugEnabled:Boolean = logger.isLoggable(Level.FINE)

	// ========================================================================
	// デバッグ出力
	// ========================================================================
	/**
	 * デバッグを出力します。
	 * @param format メッセージフォーマット
	 * @param args メッセージフォーマット様引数
	 */
	def debug(format:String, args:Any*){
		if(isDebugEnabled){
			logger.fine(format.format(args:_*))
		}
	}

	// ========================================================================
	// デバッグ出力
	// ========================================================================
	/**
	 * デバッグを出力します。
	 * @param format メッセージフォーマット
	 * @param args メッセージフォーマット様引数
	 */
	def debug(ex:Throwable, format:String, args:Any*){
		if(isDebugEnabled){
			logger.log(Level.FINE, format.format(args:_*), ex)
		}
	}

	// ========================================================================
	// トレース出力の判定
	// ========================================================================
	/**
	 * この出力先に対してトレース出力が行われるかを判定します。
	 * @return トレースレベルのログが出力される場合 true
	 */
	def isTraceEnabled:Boolean = logger.isLoggable(Level.FINEST)

	// ========================================================================
	// トレース出力
	// ========================================================================
	/**
	 * トレースを出力します。
	 * @param format メッセージフォーマット
	 * @param args メッセージフォーマット様引数
	 */
	def trace(format:String, args:Any*){
		if(isTraceEnabled){
			logger.finest(format.format(args:_*))
		}
	}

	// ========================================================================
	// トレース出力
	// ========================================================================
	/**
	 * トレースを出力します。
	 * @param format メッセージフォーマット
	 * @param args メッセージフォーマット様引数
	 */
	def trace(ex:Throwable, format:String, args:Any*){
		if(isTraceEnabled){
			logger.log(Level.FINEST, format.format(args:_*), ex)
		}
	}

}

object Logger {

	// ========================================================================
	// ログ出力先の参照
	// ========================================================================
	/**
	 * 指定されたクラスに対するログ出力先を参照します。
	 * @param name 出力先の名前
	 * @return ログ出力先
	 */
	def getLogger(name:Class[_]):Logger = getLogger(name.getName())

	// ========================================================================
	// ログ出力先の参照
	// ========================================================================
	/**
	 * 指定されたクラスに対するログ出力先を参照します。
	 * @param name 出力先の名前
	 * @return ログ出力先
	 */
	def getLogger(name:String):Logger = new Logger(name)

}