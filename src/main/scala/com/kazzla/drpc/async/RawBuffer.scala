/* Copyright (C) 2012 BJöRFUAN
 * This source and related resources are distributed under Apache License, Version 2.0.
 */
package com.kazzla.drpc.async

import java.nio.ByteBuffer

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// RawBuffer
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
/**
 * FIFO 機能を持った可変長のバイナリデータ用バッファです。バッファの内容を直接参照する
 * ことができます。
 * このインスタンスはスレッドセーフではありません。
 * @author Takami Torao
 * @param initialSize 内部バッファの初期サイズ
 */
private[async] class RawBuffer(initialSize:Int) {

	// ========================================================================
	// コンストラクタ
	// ========================================================================
	/**
	 * 初期状態で 4kB のバッファを持つインスタンスを構築します。
	 */
	def this() = this(4 * 1024)

	// ========================================================================
	// バイナリデータ
	// ========================================================================
	/**
	 * このバッファが保持しているバイナリデータです。
	 */
	private[async] var binary = new Array[Byte](initialSize)

	// ========================================================================
	// オフセット
	// ========================================================================
	/**
	 * 有効データの開始位置を表します。
	 */
	private[async] var offset = 0

	// ========================================================================
	// 長さ
	// ========================================================================
	/**
	 * 有効データの長さを表します。
	 */
	private[async] var length = 0

	// ========================================================================
	// 長さ
	// ========================================================================
	/**
	 * 有効データの長さを表します。
	 */
	def append(buffer:ByteBuffer){
		val len = buffer.remaining()
		ensureAppend(len)
		buffer.get(binary, offset + _length, len)
		_length += len
	}

	// ========================================================================
	// バッファサイズの保証
	// ========================================================================
	/**
	 * このインスタンスが保持しているバッファの有効領域へ指定されたサイズのバイナリデータを
	 * 連結できることを保証します。
	 * @param len 連結する長さ
	 */
	private[this] def ensureAppend(len:Int){
		// 現在の状態で指定サイズのデータを連結できる場合
		val total = _length + len
		if(offset + total < binary.length){
			return
		}
		// オフセットを調整すれば収まる場合
		if(total < binary.length){
			System.arraycopy(binary, offset, binary, 0, _length)
			offset = 0
			return
		}
		// バッファの拡張が必要な場合
		val temp = new Array[Byte]((total * 1.25).toInt)
		System.arraycopy(binary, offset, temp, 0, _length)
		binary = temp
		offset = 0
	}

}
