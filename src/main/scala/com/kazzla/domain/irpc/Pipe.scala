/* Copyright (C) 2012 BJöRFUAN
 * This source and related resources are distributed under Apache License, Version 2.0.
 */
package com.kazzla.domain.irpc

import java.io.{OutputStream, InputStream}

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Pipe
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
/**
 * @author Takami Torao
 */
trait Pipe {

	// ========================================================================
	// ID
	// ========================================================================
	/**
	 */
	def id:Long

	// ========================================================================
	// 入力ストリーム
	// ========================================================================
	/**
	 */
	def in:InputStream

	// ========================================================================
	// 出力ストリーム
	// ========================================================================
	/**
	 */
	def out:OutputStream

	// ========================================================================
	// キャンセルフラグ
	// ========================================================================
	/**
	 * このパイプがキャンセルされたかを表すフラグです。パイプに対するキャンセル操作はパイプ
	 * の双方が行うことができます。
	 * @param reason キャンセルの理由
	 */
	def cancel(reason:String = "operation canceled"):Unit

	// ========================================================================
	// キャンセルの判定
	// ========================================================================
	/**
	 * このパイプが自分または相手側によってキャンセルされているかを判定します。
	 * @return キャンセルされている場合 true
	 */
	def isCanceled:Boolean

	// ========================================================================
	// 結果の参照
	// ========================================================================
	/**
	 * 処理をブロックし RPC の実行結果を参照します。リモート側で例外が発生した場合は例外が
	 * スローされます。
	 * @param timeout 応答までのタイムアウト時間 (ミリ秒)
	 * @throws RemoteException リモート側で例外が発生した場合
	 * @throws CancelException 待機中に処理がキャンセルされた場合
	 */
	def apply(timeout:Long = 0):Seq[Any] = get(timeout) match {
		case Some(close) =>
			close.code match {
				case Close.Code.CLOSE => close.args
				case Close.Code.ERROR | Close.Code.FATAL | Close.Code.CANCEL =>
					throw new RemoteException(close.message)
			}
		case None =>
			throw new RemoteException("return timeout")
	}

	// ========================================================================
	// 結果の参照
	// ========================================================================
	/**
	 * 結果を参照します。指定されたタイムアウトまでに結果のリターンがなかった場合は None
	 * を返します。指定された待ち時間までに応答がなかった場合は None を返します。
	 * 待ち時間に 0 を指定した場合、応答があるまで永遠に待機します。この場合 None が返る
	 * ことはありません。
	 * @param timeout 応答待ち時間 (ミリ秒)
	 * @return RPC 実行結果
	 */
	def get(timeout:Long):Option[Close]

}
