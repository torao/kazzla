/* Copyright (C) 2012 BJöRFUAN
 * This source and related resources are distributed under Apache License, Version 2.0.
 */
package com.kazzla.domain.irpc

import com.kazzla.domain.async.Pipeline
import java.nio.ByteBuffer

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Endpoint
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
/**
 * @author Takami Torao
 */
trait Endpoint {

	// ========================================================================
	// コーデック
	// ========================================================================
	/**
	 * このエンドポイントのコーデックです。
	 */
	var codec:Codec = Codec.getCodec("messagepack")

	// ========================================================================
	// プロトコル
	// ========================================================================
	/**
	 * このエンドポイントのプロトコルです。
	 */
	var protocol:Protocol = null

	// ========================================================================
	// パイプライン
	// ========================================================================
	/**
	 * 現在使用中のパイプラインです。
	 */
	private[this] var pipeline:Option[Pipeline] = newPipeline()

	// ========================================================================
	// パイプラインの参照
	// ========================================================================
	/**
	 * 新しく使用するパイプラインを参照します。
	 * これ以上新しいパイプラインを使用できない場合は None を返します。
	 */
	def send(unit:Transferable):Unit = {
		val binary = codec.pack(unit)
		protocol.transfer(ByteBuffer.wrap(binary))
	}

	// ========================================================================
	// パイプラインの参照
	// ========================================================================
	/**
	 * 新しく使用するパイプラインを参照します。
	 * これ以上新しいパイプラインを使用できない場合は None を返します。
	 */
	protected def newPipeline():Option[Pipeline]

}
