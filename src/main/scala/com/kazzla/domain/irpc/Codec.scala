/* Copyright (C) 2012 BJöRFUAN
 * This source and related resources are distributed under Apache License, Version 2.0.
 */
package com.kazzla.irpc

import async.RawBuffer

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Codec
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
/**
 * プロシジャコールを入出力用にバイナリ化するためのトレイトです。
 * インスタンスは 1 接続に対するスコープを持つため内部でバッファリングを行うことができます。
 * @author Takami Torao
 */
abstract class Codec(val name:String) {

	// ========================================================================
	// バッファの作成
	// ========================================================================
	/**
	 * RPC のための呼び出し要求用バイナリを作成します。
	 * 引数は Call, Result, Control のいずれかの型を持ちます。
	 */
	def pack(unit:Transferable):Array[Byte]

	// ========================================================================
	// バッファの復元
	// ========================================================================
	/**
	 * 指定されたバッファから転送オブジェクトを復元します。
	 * オブジェクトを復元可能なデータが揃っていない場合は None を返します。
	 */
	def unpack(buffer:RawBuffer):Option[Transferable]

}

object Codec {

	// ========================================================================
	// ファクトリ
	// ========================================================================
	/**
	 * 名前にマッピングされたコーデック生成関数です。
	 */
	private[this] var factories = Map[String,()=>Codec]()

	// ========================================================================
	// コーデックの登録
	// ========================================================================
	/**
	 * 指定された生に対するコーデック生成関数を登録します。
	 * @param name コーデック名
	 * @param factory コーデック生成関数
	 */
	def register(name:String, factory:()=>Codec):Unit = synchronized{
		factories += (name -> factory)
	}

	// ========================================================================
	// コーデックの参照
	// ========================================================================
	/**
	 * 指定された名前に対するコーデックを参照します。コーデック名は大文字と小文字を区別し
	 * ません。名前に該当するコーデックが定義されていない場合は None を返します。
	 * @param name コーデック名
	 * @return コーデック
	 */
	def newCodec(name:String):Option[Codec] = {
		factories.get(name) match {
			case Some(factory) => Some(factory.apply())
			case None => None
		}
	}

}