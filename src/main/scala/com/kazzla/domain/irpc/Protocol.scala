/* Copyright (C) 2012 BJöRFUAN
 * This source and related resources are distributed under Apache License, Version 2.0.
 */
package com.kazzla.domain.irpc

import java.nio.ByteBuffer
import com.kazzla.domain.async.Pipeline

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Protocol
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
/**
 * <p>
 * プロトコルは Codec と実際の I/O ストリームの間に存在し、入出力ストリーム上のデータ表現
 * を
 * プロトコルは Code によって符号化された転送単位 (Transfer Unit) と実際の転送ストリー
 * ム上での入出力をマッピングするレイヤーです。
 * インスタンスはパイプラインの接続に対してスコープを持ちます。
 * </p>
 * @author Takami Torao
 */
abstract class Protocol(pipeline:Pipeline){
	init()

	// ========================================================================
	// 通信の初期化
	// ========================================================================
	/**
	 * 通信を初期化します。
	 */
	def init()

	// ========================================================================
	// 通信の終了
	// ========================================================================
	/**
	 * 通信を終了します。
	 */
	def destroy()

	// ========================================================================
	// データの転送
	// ========================================================================
	/**
	 * 指定された転送単位を転送します。
	 * 指定されたデータブロックを転送します。
	 * @param buffer 転送するデータ
	 */
	def transfer(buffer:ByteBuffer):Unit

}
